//I'm HuyNho or you can call me DengHwee
#include <bits/stdc++.h>
using namespace std;
#define faster() ios_base::sync_with_stdio(false);cin.tie();cout.tie();
#define matrix vector <vector<long long>>
#define MOD 1000000007
#define el "\n"
#define fi first
#define se second
#define pb push_back
const long long big = 1e6;

int n, p, s;
vector <bool> Primes(205,true);
vector <int> Primes_Array;
vector <vector <int>> ans;
vector <int> res;

void SieveOfEratosthenes() {
    Primes[0] = Primes[1] = false;
    for (int i = 2 ; i * i <= 200 ; i++)
    {
        if ( Primes[i] == true )
        {
            for (int j = i * i ; j <= 200 ; j += i)
            {
                Primes[j] = false;
            }
        }
    }
    for (int i = 2 ; i <= 200 ; i++)
    {
        if ( Primes[i] == true )
        {
            Primes_Array.pb(i);
        }
    }
}

void Try(int pos, int k, int sum) {
    for (int i = pos + 1 ; i <= Primes_Array.size() ; i++)
    {
        if ( sum + Primes_Array[i] == s && k + 1 == n )
        {
            res.pb(Primes_Array[i]);
            ans.pb(res);
            res.pop_back();
        }
        else if ( sum + Primes_Array[i] < s && k + 1 < n )
        {
            res.pb(Primes_Array[i]);
            Try(i, k + 1, sum + Primes_Array[i]);
            res.pop_back();
        }
    }
}

int main() {
    faster();
    SieveOfEratosthenes();
    int t;
    cin >> t;
    while (t--)
    {
        ans.clear();
        res.clear();
        cin >> n >> p >> s;
        int pos = 0;
        while ( Primes_Array[pos] <= p ) pos++;
        Try(pos - 1, 0, 0);
        cout << ans.size() << el;
        sort(ans.begin(), ans.end());
        for (int i = 0 ; i < ans.size() ; i++)
        {
            for (int j = 0 ; j < ans[i].size() ; j++)
            {
                cout << ans[i][j] << " ";
            }
            cout << el;
        }
    }
}
